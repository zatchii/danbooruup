// ==UserScript==
	// @name DanbooruUp user script
	// @description Tag field autocompleter for Danbooru.
	// @version 0.4.0
	// @include http://danbooru.donmai.us/*
	// @include http://behoimi.org/*
// ==/UserScript==

IF EXTENSION
$PRIVILEGED_CLASSES
// Inited early to catch UpdateTagHistory requests.
danbooruUpDOMProxyUpper.init();
ENDIF

(function() {

// Drop privileges in Chrome
IF EXTENSION
if (chrome.extension) {
	var el = document.createElement('script');
	el.type = 'text/javascript';
	el.innerHTML = "(" + arguments.callee + ")();";
	document.head.appendChild(el);
	return;
}
ENDIF
IF NOT_EXTENSION
if (typeof window.GM_xmlhttpRequest == "function") {
	location.href = "javascript:(" + encodeURI(arguments.callee) + ")();";
	return;
}
ENDIF

var style_arr = {
	'0': '',
	'1': 'color: #a00;',
	'2': 'background: #ddd;',
	'3': 'color: #a0a;',
	'4': 'color: #0a0;',
	'5': 'color: #00b;',
	'6': 'color: #983;',
	'7': 'color: #aaa;',
	'0.selected': '',
	'1.selected': '',
	'2.selected': '',
	'3.selected': '',
	'4.selected': '',
	'5.selected': '',
	'6.selected': '',
	'7.selected': '',
};

if (!window.KeyEvent) {
	window.KeyEvent = {
		DOM_VK_TAB: 9,
		DOM_VK_RETURN: 13,
		DOM_VK_CONTROL: 17,
		DOM_VK_ESCAPE: 27,
		DOM_VK_SPACE: 32,
		DOM_VK_PAGE_UP: 33,
		DOM_VK_PAGE_DOWN: 34,
		DOM_VK_UP: 38,
		DOM_VK_DOWN: 40,
		DOM_VK_INSERT: 45,
		DOM_VK_E: 69,
		DOM_VK_HELP: 6
	};
}
var KeyEvent = window.KeyEvent;


var site_uri = document.location.protocol + '//' + document.location.host;
var is_danbooru_2 = site_uri == 'http://danbooru.donmai.us';

IF DATABASE

// Handles configuration.
var danbooruUpConfig = {
	loaded: false,

	defaults: {
		'Enable': true,
		'EnableUpdates': true,
		'UpdateFrequency': 24,
		'UpdateOnSubmit': true,
		'AlternateSearching': false,
		'SuggestPrefixes': false,
		'CompleteWithTab': false,
		'LastUpdated': 0,
		'ForceUpdate': false,
		'KeepHistory': true,
		'Aborts': 0,
	},

	init: function()
	{
		if (!window.localStorage)
			return;
		for (d in this.defaults) {
			if (window.localStorage['danbooruUp' + d] === undefined)
				window.localStorage['danbooruUp' + d] = this.defaults[d];
		}
		this.loaded = true;
	},

	// Get a config value from localStorage
	getConfig: function(name)
	{
		var parsers = {
			'number': parseFloat,
			'boolean': function(x) {return x == 'true';},
		}
		return parsers[typeof(this.defaults[name])](window.localStorage['danbooruUp' + name])
	},

	setConfig: function(name, value)
	{
		window.localStorage['danbooruUp' + name] = value;
	},

	getConfigDict: function()
	{
		var c = {};
		for (d in this.defaults)
			c[d] = this.getConfig(d);
		return c;
	}
};

// Handles DB access.
var danbooruUpDBUpdater = {
	loaded: false,
	database: null,
	config: null, // Set from onload function
	gui: null, // Set from onload function

	init: function()
	{
		if (this.initDatabase())
			return; // Wait for database to be initialised

		if (!this.gui.loaded)
			return;

		this.checkForUpdate(false);
		this.loaded = true;
	},

	initDatabase: function()
	{
		if (!window.openDatabase) {
			this.gui.error("Your browser does not support Web SQL database. Upgrade to Opera 10.50 or later.");
			return;
		}

		try {
			this.database = window.openDatabase('danbooruUp', '', 'Tag database', 15 * 1024 * 1024);
			if (this.database.version != '1.0') {
				this.createTables(this.database);
				return true;
			}
		} catch (e) {
			this.gui.error('Could not open database, ' + e.message + '.');
		}
	},

	createTables: function(db)
	{
		var o = this;
		db.changeVersion('', '1.0', function(t) {
			t.executeSql('CREATE TABLE IF NOT EXISTS config(name TEXT PRIMARY KEY, value)');
			t.executeSql('CREATE TABLE IF NOT EXISTS tag(tag_id INTEGER PRIMARY KEY, tag_name TEXT NOT NULL UNIQUE, tag_count INTEGER NOT NULL DEFAULT 0, tag_type INTEGER NOT NULL DEFAULT 0, ambiguous INTEGER NOT NULL DEFAULT 0)');
			t.executeSql('CREATE TABLE IF NOT EXISTS tag_history(th_id INTEGER PRIMARY KEY, tag_id INTEGER NOT NULL, ctx_id INTEGER NOT NULL)');
			t.executeSql('CREATE TABLE IF NOT EXISTS tag_context(ctx_id INTEGER PRIMARY KEY, context TEXT NOT NULL UNIQUE, weight REAL DEFAULT 1)');
			t.executeSql('CREATE TABLE IF NOT EXISTS spec_history(sh_id INTEGER PRIMARY KEY, spec TEXT NOT NULL, value TEXT NOT NULL, context TEXT NOT NULL)');

			t.executeSql("INSERT OR IGNORE INTO config VALUES('last_update_attempt', 0)");
		}, function(e) {
			o.gui.error('Failed to initialise database, ' + e.message + '.');
		},
		function() {
			o.gui.status('Database created, rerunning init.');
			o.init();
		});
	},

	clearTags: function()
	{
		if (!confirm('Delete all tags?')) {
			this.gui.status('Canceled reset.');
			return;
		}
		var o = this;
		this.database.transaction(function(t) {
			t.executeSql('DELETE FROM tag');
		}, null, function() { o.gui.status("Tags deleted.") });
	},

	clearHistory: function()
	{
		if (!confirm("Clear search history?")) {
			this.gui.status("Canceled history clearing.");
			return;
		}
		var o = this;
		this.database.transaction(function(t) {
			t.executeSql('DELETE FROM tag_history');
			t.executeSql('DELETE FROM tag_context');
			t.executeSql('DELETE FROM spec_history');
		}, null, function() { o.gui.status('History cleared'); });
	},


	checkForUpdate: function(interactive)
	{
		var force = this.config.getConfig('ForceUpdate');
		if (force)
			this.config.setConfig('ForceUpdate', false)

		if (!force && !interactive) {
			if (!(this.config.getConfig('Enable') && this.config.getConfig('EnableUpdates')))
				return;
			if (!(this.config.getConfig('LastUpdated') + this.config.getConfig('UpdateFrequency') * 60 * 60 * 1000 < new Date().getTime()))
				return;
		}
		var o = this;
		this.getConfigDB('last_update_attempt', function(last_attempt) {
			var since_last = new Date().getTime() - last_attempt;

			// An update can take some time, so we take care not to initiate a load of them at once.
			// Uses a time value in the database as a time expiring lock.

			if (since_last < 5 * 60 * 1000 && !(force || interactive &&
					confirm("An update was attempted " + Math.round(since_last / 1000) + " seconds ago and may still be ongoing.\n" +
						"Proceed with update anyway?"))) {
				o.gui.status("Recent update attempt, waiting.");
				return;
			}

			o.database.transaction(function(t) {
				t.executeSql("UPDATE config SET value = ? WHERE name = 'last_update_attempt' AND value = ?",
					[new Date().getTime(), last_attempt],
					function(t, r) {
						// Initiate the update if we got the lock, else fail.
						if (r.rowsAffected == 1) {
							o.doTagUpdate();
						} else {
							o.gui.status('Could not grab lock, aborting update.');
						}
					});
			});
		});
	},

	doTagUpdate: function()
	{
		this.gui.busy(true);

		var o = this;
		this.getMaxTagId(function(max_id) {
			if (is_danbooru_2) {
				o.getMaxTagIdOnBooru(function(target_id) {
					if (target_id <= max_id) {
						o.gui.status('Tags are up to date.');
						on_success();
						return;
					}
					var need_full_update = target_id - max_id > 2000;

					if (need_full_update) {
						var uri = site_uri + '/cache/tags.json';
						o.fetchAndInsertTags(uri, on_success, on_error);
					} else {
						o.fetchTagsRepeated(target_id, 20, on_success, on_error);
					}
				}, on_error);
			} else {
				var path = '/tag/index.json?limit=0';
				if (max_id)
					path += '&after_id=' + (max_id + 1);
				var uri = site_uri + path;

				o.fetchAndInsertTags(uri, on_success, on_error);
			}
		});

		function on_success() {
			o.config.setConfig('LastUpdated', new Date().getTime());
			o.gui.busy(false);
		}
		function on_error(msg) {
			o.gui.error(msg);
			o.gui.busy(false);
		}
	},

	getMaxTagId: function(callback)
	{
		this.database.readTransaction(function (t) {
			t.executeSql('SELECT MAX(tag_id) AS max_id FROM tag', null, function(t, r) {
				var max_id = r.rows[0].max_id || 0;
				callback(max_id);
			});
		});
	},

	getMaxTagIdOnBooru: function(callback, error)
	{
		this.gui.status('Checking max tag id on site...');

		var uri = site_uri + '/tags.json?search%5Border%5D=date';
		var request = new window.XMLHttpRequest();
		request.open('GET', uri);
		request.onreadystatechange = function(event) {
			if (this.readyState == 4) {
				if (this.status == 200) {
					var tags = JSON.parse(this.responseText);
					callback(tags[0].id);
				} else {
					error('Could not get max tag id from site, got ' + this.status + '.');
				}
			}
		};
		request.send();
	},

	// Do several update attempts up to a set limit to get up to date
	fetchTagsRepeated: function(target_id, max_attempts, callback, error)
	{
		var o = this;

		do_fetch();

		function do_fetch() {
			if (max_attempts <= 0) {
				callback();
				return;
			}
			max_attempts--;
			o.getMaxTagId(function(max_id) {
				if (target_id <= max_id) {
					callback();
					return;
				}

				var uri = site_uri + '/tags.json?page=a' + max_id;
				o.fetchAndInsertTags(
					uri,
					function(ntags) {
						// Stop if no tags were returned
						if (ntags > 0)
							do_fetch();
						else
							callback();
					},
					error
				);
			});
		}
	},

	// Fetch tags from URI and insert them to the database.
	// Calls callback with number of tags returned from API.
	fetchAndInsertTags: function(uri, callback, error)
	{
		this.gui.status('Connecting...');

		var o = this;

		var request = new window.XMLHttpRequest();
		request.open('GET', uri);

		request.onreadystatechange = function(event) {
			if (this.readyState == 3) {
				o.gui.status('Downloading ' + uri + '...');
			} else if (this.readyState == 4) {
				if (this.status == 200) {
					o.gui.status('Parsing...');
					// var time1 = new Date().getTime();
					var tags = JSON.parse(this.responseText);
					// console.log('got ' + tags.length + ' tags, parsed in ' +(new Date().getTime() - time1));
					o.insertTags(tags, function() { callback(tags.length); }, error);
				} else {
					error('Could not get tags. Status ' + this.status + '.');
				}
			}
		};
		o.config.setConfig('Aborts', o.config.getConfig('Aborts') + 1);

		request.send();
	},

	insertTags: function(tags, callback, error)
	{
		// Could possibly get a small speedup by dropping the tag_name index before inserting many tags,
		// and a larger one by not using placeholders in the query.

		if (!tags.length) {
			this.gui.status('No new tags.');
			callback();
			return;
		}

		var o = this;

		this.gui.status('Inserting tags...');
		// var time = new Date().getTime();
		this.database.transaction(function(t) {
			var tag_list;
			if (is_danbooru_2) {
				tag_list = (tags.filter(function(tag) {return tag.post_count > 0;})
					.map(function(tag) {return [tag.id, tag.name, tag.post_count, tag.category, 0];}));
			} else {
				tag_list = tags.map(function(tag) {return [tag.id, tag.name, tag.count, tag.type, tag.ambiguous?1:0];});
			}
			o.batchify(t, 'INSERT OR IGNORE INTO tag(tag_id, tag_name, tag_count, tag_type, ambiguous)', 5, tag_list);
		},
		function(e) {
			if (e.code == 4) { // QUOTA_ERR
				alert('An update of the DanbooruUp tag database failed due to insufficient storage quota.\n' +
					'Please increase the local storage quota before enabling updates.');
				o.config.setConfig('EnableUpdates', false);
				o.config.setConfig('UpdateOnSubmit', false);
				o.updateDisplay();
			}
			o.config.setConfig('Aborts', o.config.getConfig('Aborts') - 1000);
			error('Database insertion failed due to error, ' + e.message + ' (' + e.code + ').');
		},
		function() {
			// console.log('Inserted in ' + (new Date().getTime() - time));
			o.config.setConfig('Aborts', o.config.getConfig('Aborts') - 1);
			o.gui.status('Downloaded ' + tags.length + ' tags.');
			callback();
		});
	},

	// Run the statement in the transaction using UNION ALL to insert multiple items per statement.
	batchify: function(transaction, statement, ncolumns, data)
	{
		if (data.length == 0)
			return;
		var max_args = 200;
		var base_args = statement.split('?').length - 1;
		var step = Math.floor((max_args - base_args) / ncolumns);
		var column = new Array(ncolumns + 1).join('?, ').slice(0,-2);
		var tmp_statement = '';
		var tmp_len = 0;
		var a = [];
		for (var i = 0; i < data.length; i += step) {
			var chunk = data.slice(i, i + step);
			if (chunk.length != tmp_len) {
				tmp_statement = statement + ' SELECT ' + column + new Array(chunk.length).join('UNION ALL SELECT ' + column);
				tmp_len = chunk.length;
			}
			transaction.executeSql(tmp_statement, a.concat.apply(a, chunk));
		}
	},

	// Update the tag history.
	// used_context is a list of context items, tag_context is a {tag: context} mapping and specifier is a {specifier: [value, context]} mapping.
	updateTagHistory: function(used_context, tag_contexts, specifier_contexts)
	{
		function inClause(data) {
			return 'IN (' + new Array(data.length + 1).join('?, ').slice(0,-2) + ')';
		}
		// Check for update while we're at it.
		// Hack to drive update checks in the Chrome extension.
		this.checkForUpdate(false);

		var o = this;

		var tags = [];
		for (tag in tag_contexts)
			tags.push(tag);

		var tag_ids = {}, context_ids = {};

		// var tim = new Date().getTime();
		function insertHistory(t) {
			// Insert all combinations of tags and contexts into the tag history.
			var tag_x_context = [];
			for (var tag in tag_ids) {
				var tag_id = tag_ids[tag];
				tag_contexts[tag].forEach(function(ctx) { tag_x_context.push([tag_id, context_ids[ctx]]); });
			}
			o.batchify(t, 'INSERT INTO tag_history(tag_id, ctx_id)', 2, tag_x_context);

			var spec_x_context = [];
			for (var spec in specifier_contexts) {
				var value = specifier_contexts[spec][0];
				specifier_contexts[spec][1].forEach(function(ctx) { spec_x_context.push([spec, value, ctx]); });
			}
			o.batchify(t, 'INSERT INTO spec_history(spec, value, context)', 3, spec_x_context);

			// Trim history, recalculate context weights, and remove unused contexts
			t.executeSql('DELETE FROM tag_history WHERE th_id <= (SELECT max(th_id) - 10000 FROM tag_history)'); // Max history items is 10,000
			t.executeSql('DELETE FROM spec_history WHERE sh_id <= (SELECT max(sh_id) - 2000 FROM spec_history)'); // Max spec history items is 2,000
			t.executeSql('UPDATE tag_context SET weight = 1.0 / (SELECT count() from tag_history WHERE tag_history.ctx_id = tag_context.ctx_id)');
			t.executeSql('DELETE FROM tag_context WHERE weight is NULL');
		}

		this.database.transaction(function(t) {
			// Read tag ids and context ids, and insert any missing contexts.
			t.executeSql('SELECT tag_id, tag_name FROM tag WHERE tag_name ' + inClause(tags), tags, function(t, r) {
				for (var i = 0; i < r.rows.length; i++) {
					var row = r.rows[i];
					tag_ids[row.tag_name] = row.tag_id;
				}
			});
			t.executeSql('SELECT ctx_id, context FROM tag_context WHERE context ' + inClause(used_context), used_context, function(t, r) {
				for (var i = 0; i < r.rows.length; i++) {
					var row = r.rows[i];
					context_ids[row.context] = row.ctx_id;
				}

				var new_ctx_items = used_context.filter(function(ctx) { return !(ctx in context_ids); });

				if (new_ctx_items.length == 0) {
					insertHistory(t);
				} else {
					for (i = 0; i < new_ctx_items.length; i++) {
						// Need own closure to store ctx for callback.
						(function(ctx, is_last) {
							t.executeSql('INSERT OR REPLACE INTO tag_context(context) VALUES(?)', [ctx], function(t, r) {
								context_ids[ctx] = r.insertId;
								if (is_last)
									insertHistory(t);
							});
						})(new_ctx_items[i], i == new_ctx_items.length - 1);
					}
				}
			});
		},
		function(e) {
			o.gui.error('Could not save context, ' + e.message + '.');
		},
		function() {
			// console.log('ut ' + (new Date().getTime() - tim));
		});
	},

	// Get a config value from the database
	getConfigDB: function(name, callback)
	{
		this.database.readTransaction(function(t) {
			t.executeSql('SELECT value FROM config WHERE name = ?', [name], function (t, r) {
				if (r.rows.length == 0)
					callback(null);
				else
					callback(r.rows[0].value);
			});
		});
	},

	// Search functions

	// Search for tags ordered by tag history
	historySearch: function(query, context, limit, callback)
	{
		this.database.readTransaction(function(t) {
			t.executeSql('SELECT tag_name, tag_type, ambiguous, tag_count, SUM(weight) FROM tag NATURAL JOIN tag_history NATURAL JOIN tag_context ' +
				'WHERE tag_name GLOB ? AND context IN (' + new Array(context.length + 1).join('?, ').slice(0,-2) + ') GROUP BY tag_id ' +
				'UNION ALL SELECT tag_name, tag_type, ambiguous, tag_count, 0 FROM tag WHERE tag_name GLOB ? ' +
				'ORDER BY SUM(weight) DESC, tag_count DESC, tag_name LIMIT ?',
				[query].concat(context, query, limit * 2), // There may be duplicates in the join, so select 2*limit to get at least limit.
				function(t, r) {
					var seen = {};
					var tags = [];
					var rows = r.rows;
					for (var i = 0; i < rows.length && tags.length < limit; i++) {
						var tag = rows[i];
						if (!(tag.tag_name in seen)) {
							tags.push([tag.tag_name, tag.tag_type, tag.ambiguous]);
							seen[tag.tag_name] = true;
						}
					}
					callback(tags);
				}
			);
		});
	},

	// Search for tags ordered by tag count
	tagSearch: function(query, limit, callback)
	{
		this.database.readTransaction(function(t) {
			t.executeSql('SELECT tag_name, tag_type, ambiguous FROM tag WHERE tag_name GLOB ? ORDER BY tag_count DESC, tag_name ASC LIMIT ?',
				[query, limit],
				function(t, r) {
					// callback(Array.map(rows, function(tag) [tag.tag_name, tag.tag_count, tag.ambiguous]));
					var tags = [];
					var rows = r.rows;
					for (var i = 0; i < rows.length; i++) {
						var tag = rows[i];
						tags.push([tag.tag_name, tag.tag_type, tag.ambiguous]);
					}
					callback(tags);
				}
			);
		});
	},

	// Search search specifier history
	specSearch: function(query, specifier, context, limit, callback)
	{
		this.database.readTransaction(function(t) {
			t.executeSql('SELECT value FROM spec_history WHERE ' +
				'spec=? AND value glob ? AND context IN (' + new Array(context.length + 1).join('?, ').slice(0, -2) + ') ' +
				'GROUP BY value ORDER BY count() DESC, value ASC LIMIT ?',
				[specifier, query].concat(context, limit),
				function(t, r) {
					var values = [];
					var rows = r.rows;
					for (var i = 0; i < rows.length; i++) {
						values.push([r.rows[i].value, 0, 0]);
					}
					callback(values);
				}
			);
		});
	},

	// Add tag type info to a list of tag names.
	enhanceTags: function(tags, callback)
	{
		if (tags.length == 0) {
			callback([]);
			return;
		}

		rich_tags = {};
		this.database.readTransaction(function(t) {
			t.executeSql('SELECT tag_name, tag_type, ambiguous FROM tag WHERE tag_name IN (' +
					new Array(tags.length + 1).join('?, ').slice(0,-2) + ')', tags,
				function(t, r) {
					for (var i = 0; i < r.rows.length; i++) {
						var tag = r.rows[i];
						rich_tags[tag.tag_name] = [tag.tag_name, tag.tag_type, tag.ambiguous];
					}
				}
			);
		}, null, function() {
			callback(tags.map(function(tag) {return rich_tags[tag] || [tag, 0, 0];}));
		});
	},
};

// Makes the settings panel
var danbooruUpGui = {
	config: null, // Set from onload function
	status_div: null,
	loaded: false,

	options: [
		{s: 'Enable', l: 'Enable tag autocompletion',
			c: [
				{s: 'AlternateSearching', l: 'Alternate searching (abc -> *a*b*c*)'},
				{s: 'SuggestPrefixes', l: 'Suggest prefixes'},
				{s: 'CompleteWithTab', l: 'Complete with tab'},
				{s: 'KeepHistory', l:'Use search history'},
				{s: 'UpdateOnSubmit', l: 'Update after post submission'},
				{s: 'EnableUpdates', l: 'Periodic updates',
					c: [
					 {s: 'UpdateFrequency', l: 'Hours between updates'}
				]},
		]},
	],


	init: function()
	{
		var navbar = document.getElementById('navbar') || document.getElementById('links') || document.querySelector('nav menu.main');
		if (!navbar)
			return;

		var cssdec = '#dbu_panel { background: white; border: 1px solid black; position: absolute; padding: 0.2em; border-radius: 0.5em;' +
			' -o-transition: opacity 0.2s; -webkit-transition: opacity 0.2s; } ' +
			'#dbu_panel h3 { font-family: "verdana", sans-serif; font-size: 15px; font-weight: 400; margin-left: 1em;} ' +
			'#dbu_panel ul { list-style: none; margin: 0} #dbu_panel li { margin: 0; margin-top: 0.2em; } ' +
			'#dbu_panel label { font-weight: normal; margin-left: 0.2em; }' +
			'#dbu_panel input[type=number] { width: 3em; }' +
			'#dbu_status { height: 1.5em; }' +
			'#dbu_button { -o-transition: color 0.5s; -webkit-transition: color 0.5s; }';

		var style = document.createElement("style");
		style.appendChild(document.createTextNode(cssdec));
		document.getElementsByTagName("head")[0].appendChild(style);


		// Make configure link
		var menuItem = document.createElement('a');
		menuItem.appendChild(document.createTextNode('\u25ca'));
		menuItem.href = '';
		menuItem.id = 'dbu_button';
		menuItem.title = 'Autocompletion settings';
		menuItem.addEventListener('click', function(e) {
			panel.style.display = (panel.style.display == 'none' ? '' : 'none');
			// Only fades in, not out since display:none is instant.
			panel.style.opacity = (panel.style.opacity == 1 ? 0 : 1);
			e.preventDefault();
		}, false);
		if (navbar.id == 'navbar')
			navbar.insertBefore(document.createElement('li'), navbar.lastElementChild).appendChild(menuItem);
		else
			navbar.insertBefore(menuItem, navbar.lastElementChild);
		this.menuItem = menuItem;

		// Make panel
		var o = this;
		var panel = document.querySelector('body').appendChild(document.createElement('div'));
		panel.id = 'dbu_panel';
		panel.innerHTML = '<h3>Autocompletion settings</h3> <div></div>' +
			'<input type="button" value="Update now"/> <input type="button" value="Clear tags"/> <input type="button" value="Clear history"/> <div><small id="dbu_status"/></div>';

		var buttons = panel.querySelectorAll('input');
		buttons[0].onclick = function() { o.db_service.checkForUpdate(true) };
		buttons[1].onclick = function() { o.db_service.clearTags() };
		buttons[2].onclick = function() { o.db_service.clearHistory() };

		panel.querySelector('div').appendChild(this.makeSettingsForm(this.options));
		this.updateDisplay();

		this.status_div = panel.querySelector('small');
		this.loaded = this.status_div;

		// Position and hide.
		panel.style.top = menuItem.offsetTop + menuItem.offsetHeight + 'px';
		panel.style.left = Math.max(0, menuItem.offsetLeft + menuItem.offsetWidth - panel.offsetWidth) + 'px';
		panel.style.display = 'none';
		panel.style.opacity = 0;
	},

	makeSettingsForm: function(options)
	{
		function setType(input, type) {
			if (type == 'number') {
				input.type = 'number';
				input.min = 0;
				input.step = 'any';
			} else {
				input.type = 'checkbox';
			}
		}
		var form = document.createDocumentFragment();
		var ul = form.appendChild(document.createElement('ul'));

		var o = this;
		function change(e) { o.changeSetting(this); }

		for (var i = 0; i < options.length; i++) {
			var li = ul.appendChild(document.createElement('li'));

			var opt = options[i];
			var input = li.appendChild(document.createElement('input'));
			input.id = 'dbu_' + opt.s;
			//setType(input, typeof(this.config.defaults[opt.s]));
			setType(input, typeof(this.config.getConfig(opt.s)));
			input.onchange = change;

			var label = li.appendChild(document.createElement('label'));
			label.appendChild(document.createTextNode(opt.l));
			label.htmlFor = input.id;

			if (opt.c)
				form.appendChild(this.makeSettingsForm(opt.c));
		}
		return form;
	},

	changeSetting: function(input)
	{
		if (input.checkValidity && !input.checkValidity())
			return;
		var sname = input.id.substring(4);
		function find(opts) {
			if (!opts || !opts.length)
				return null;
			if (opts[0].s == sname)
				return opts[0];
			return find(opts[0].c) || find(opts.slice(1));
		}
		var sopts = find(this.options);
		var value = input.type == 'checkbox' ? input.checked : input.value;

		this.config.setConfig(sname, value);
		this.updateDisplay();
#IF NOT_EXTENSION
		if (sname == 'Enable')
			AutoCompleter.prototype.disabled = !value;
#ENDIF
	},

	// Enable/disable configuration options according to current settings.
	updateDisplay: function()
	{
		if (!this.config.loaded || !this.menuItem)
			return;
		var o = this;
		function update(opts, disabled) {
			for (var i = 0; i < opts.length; i++) {
				var e = document.getElementById('dbu_' + opts[i].s);
				if (e.type == 'checkbox')
					e.checked = o.config.getConfig(opts[i].s);
				else
					e.value = o.config.getConfig(opts[i].s);
				e.disabled = disabled;
				if (opts[i].c)
					update(opts[i].c, disabled || !e.checked);
			}
		}
		update(this.options, false);
	},


	status: function(message)
	{
		if (!this.status_div)
			return
		var sd = this.status_div;
		sd.style.color = 'black';
		while (sd.firstChild)
			sd.removeChild(sd.firstChild);
		sd.appendChild(document.createTextNode(message));
	},

	error: function(message)
	{
		if (window.console && console.error)
			console.error(message);
		if (!this.status_div)
			return
		this.status(message);
		this.status_div.style.color = 'red';
	},

	busy: function(is_busy)
	{
		if (is_busy)
			this.menuItem.style.color='red';
		else
			this.menuItem.style.color='';
	},
};
ENDIF /* DATABASE */

var danbooruUpCompleter = {
IF DATABASE
	db_service: null,   // Set from onload function
	config: null, // Set from onload function
ENDIF
IF NOT_DATABASE
	prev_result: [],
	prev_tag: '',
	prev_pos: 0,
ENDIF
	cur_tag: '',
	cur_prefix: '',
	cur_search_type: '',
	cur_callback: null,
	timer: null,

	tag_prefix_re: /^$|^[-~]$|^ambiguous:|^(:?general|artist|char(?:acter)?|copy(?:right)?):/,

	getSuggestions: function(tag, prefix, search_type, callback)
	{
		this.cur_callback = callback;
		this.cur_tag = tag;
		this.cur_prefix = prefix;
		this.cur_search_type = search_type;
		var o = this;
		if (!this.timer)
			this.timer = window.setTimeout(function() { o.doSearch(); }, 100);
	},

	abortSuggestion: function()
	{
		if (this.timer)
			window.clearTimeout(this.timer);
		this.timer = null;
	},

IF DATABASE
	// Escape glob wildcards except '*', handle alternate search and add end wildcard
	writeGlob: function(query)
	{
		// Only add wildcards if not present
		if (query.indexOf('*') == -1) {
			if (this.config.getConfig('AlternateSearching'))
				query = '*' + query.split(/(?:)/).join('*') + (query ? '*' : ''); // bob -> *b*o*b*
			else
				query = query + '*';
		}
		return query.replace(/[[?]/g, '[$&]'); // Escape '[' and '?' by putting them in single-character sets.
	},

	getContext: function(search_type)
	{
		if (search_type == 'post') {
			var source = document.getElementById('post_source') || document.getElementById('upload_source');
			var match = null;
			if (source) match = source.value.match(/(?:.*:\/\/)?(.*?)\/(.*)/);
			// Domain name except top level, and path name except file name.
			if (match)
				return ['__ALL__'].concat(match[1].split('.').slice(0,-1), match[2].split('/').slice(0,-1));
			else
				return ['__ALL__', '__POST__'];
		} else if (search_type == 'update') {
			var context = ['__ALL__', '__UPDATE__'];
			// Grab first artist and copyright, if available.
			var tags = document.getElementById('tag-sidebar') || document.getElementById('tag-list');
			if (!tags) return context;
			var artist = tags.querySelector('.tag-type-artist > a:last-of-type') ||
				tags.querySelector('.category-1 .search-tag');
			var copy = tags.querySelector('.tag-type-copyright > a:last-of-type') ||
				tags.querySelector('.category-3 .search-tag');
			if (artist)
				context.push(artist.textContent.replace(' ', '_'));
			if (copy)
				context.push(copy.textContent.replace(' ', '_'));
			return context;
		} else {
			return ['__ALL__', '__SEARCH__'];
		}
	},

	// TODO: Moving this logic up would simplify things for the extension case.
	doSearch: function()
	{
		this.timer = null;

		var limit = 100;
		var query = this.cur_tag;
		// var t = new Date().getTime();

		var o = this;
		function callback(result) {
			// console.log('st ' + (new Date().getTime() - t));
			o.cur_callback(query, result);
		}

		var tag = this.cur_tag.toLowerCase();
		var prefix = this.cur_prefix.toLowerCase();

		var is_tag = this.tag_prefix_re.test(prefix);

		if (this.config.getConfig('KeepHistory')) {
			var context = this.getContext(this.cur_search_type);
			var glob = this.writeGlob(query);
			if (prefix !== '' && prefix.charAt(0) == '-') {
				context.push('__NEG__');
				prefix = prefix.slice(1);
			}
			if (is_tag)
				this.db_service.historySearch(glob, context, limit, callback);
			else
				this.db_service.specSearch(glob, prefix, context, limit, callback);
		} else {
			if (is_tag)
				this.db_service.tagSearch(this.writeGlob(query), limit, callback);
			else
				this.cur_callback(prefix, null);
		}
	},

	// Called right before submission to update the tag history.
	onSubmit: function(search_type, tags)
	{
		var context = this.getContext(search_type);
		var context_n = context.concat('__NEG__');
		if (search_type == 'update') {
			var old_tags = {};
			var old_tag_el = document.getElementById('post_old_tags') || document.getElementById('post_old_tag_string');
			if (old_tag_el)
				old_tag_el.value.split(' ').forEach(function(tn) { old_tags[tn] = true; });
			tags = tags.filter(function(tag) { return !(tag[0] in old_tags); });
		}

		var tag_ctxs = {};
		var spec_ctxs = {};
		for (var i = 0; i < tags.length; i++) {
			var tag_name = tags[i][0].toLowerCase();
			var prefix = tags[i][1];
			var is_tag = true;
			var tag_ctx = context;
			if (prefix !== '') {
				prefix = prefix.toLowerCase();
				is_tag = this.tag_prefix_re.test(prefix);
				if (prefix.charAt(0) == '-') {
					tag_ctx = context_n;
					prefix = prefix.slice(1);
				}
			}
			if (is_tag)
				tag_ctxs[tag_name] = tag_ctx;
			else
				spec_ctxs[prefix] = [tag_name, tag_ctx];
		}

		this.delayedSubmit(search_type, context_n, tag_ctxs, spec_ctxs);
	},

	// Store submit history in session storage to next page load.
	// Reduces the chance of the DB operation being cut off.
	delayedSubmit: function(search_type, used_context, tag_contexts, specifier_contexts)
	{

		if ((search_type == 'post' || search_type == 'update') && this.config.getConfig('UpdateOnSubmit'))
			this.config.setConfig('ForceUpdate', true);

		if (this.config.getConfig('KeepHistory')) {
			// Put the item in session storage to be inserted on next page load by doHistory.
			var history, history_str = window.sessionStorage.danbooruUpHistory;
			if (history_str) {
				history = JSON.parse(history_str);
			} else {
				history = [];
			}
			history.push([used_context, tag_contexts, specifier_contexts]);
			window.sessionStorage.danbooruUpHistory = (Object.toJSON || JSON.stringify)(history);
		}
	},

	// Insert any history that has been queued from delayedSubmit.
	doHistory: function()
	{
		if (!window.sessionStorage.danbooruUpHistory)
			return;

		var history = JSON.parse(window.sessionStorage.danbooruUpHistory);
		for (var i = 0; i < history.length; i++) {
			var h = history[i];
			this.db_service.updateTagHistory(h[0], h[1], h[2]);
		}
		delete window.sessionStorage.danbooruUpHistory;
	},

	enhanceTags: function(tags, callback) {
		this.db_service.enhanceTags(tags, callback);
	},

	prefCompleteWithTab: function()
	{
		return this.config.getConfig('CompleteWithTab');
	},

	prefSuggestPrefixes: function()
	{
		return this.config.getConfig('SuggestPrefixes');
	},

ENDIF /* DATABASE */
IF NOT_DATABASE
	writeRegexp: function(query)
	{
		var re = query.replace(/[\][().?+{}|^$\\]/g, '\\$&');
		re = re.replace(/\*/g, '.*');
		if (/\*/.test(re))
			re += '$';
		return new RegExp('^' + re);
	},

	// Called on time out, do query.
	doSearch: function()
	{
		this.timer = null;

		// Check for unsupported prefix
		var st = this.cur_search_type;
		var pr = this.cur_prefix.toLowerCase();
		if (st == 'search' && pr != '' && pr != '-' && pr != '~' || (st == 'update' || st == 'post') && /rating|parent|-?pool/.test(pr)) {
			this.cur_callback(pr, null);
			return;
		}
		var re = this.writeRegexp(this.cur_tag);
		var ref = function(x) { return re.test(x) };

		var tags;
		// If there's no wildcards, and the search is a more specific version of the old search,
		// then search in the previously returned result first.
		if ((this.prev_tag == this.cur_tag.slice(0, this.prev_tag.length) &&
			 !/\*/.test(this.cur_tag))) {
			tags = this.prev_result.filter(ref);
		} else {
			tags = [];
			this.prev_pos = 0;
		}

		var i;
		for (i = this.prev_pos; i < danbooruUpACTagArray.length && tags.length < 100; i++) {
			if (re.test(danbooruUpACTagArray[i][0]))
				tags.push(danbooruUpACTagArray[i]);
		}

		this.prev_pos = i;
		this.prev_tag = this.cur_tag;
		this.prev_result = tags;

		this.cur_callback(this.cur_tag, tags);
	},

	// Add tag type info to a list of tag names.
	enhanceTags: function(tags, callback)
	{
		var tag_dict = {};
		for (var i = 0; i < tags.length; i++)
			tag_dict[tags[i]] = [tags[i], 0, 0];
		for (var i = 0; i < danbooruUpACTagArray.length; i++) {
			if (danbooruUpACTagArray[i][0] in tag_dict)
				tag_dict[danbooruUpACTagArray[i][0]] = danbooruUpACTagArray[i];
		}
		var tags_new = [];
		for (var i = 0; i < tags.length; i++)
			tags_new.push(tag_dict[tags[i]]);
		callback(tags_new);
	},

	onSubmit: function(search_type, tags)
	{
		// Do nothing.
		return false;
	},

	prefCompleteWithTab: function()
	{
		return false;
	},

	prefSuggestPrefixes: function()
	{
		return false;
	},
ENDIF /*NOT_DATABASE*/

	getRelated: function(tag, callback)
	{
		// Will only work if the booru is running from the top level.
		var uri
		if (is_danbooru_2) {
			uri = site_uri + '/related_tag.json?query=' + encodeURIComponent(tag);
		} else {
			uri = site_uri + '/tag/related.json?tags=' + encodeURIComponent(tag);
		}

		var request = new window.XMLHttpRequest();
		request.open('GET', uri);

		var o = this;
		request.onreadystatechange = function(event) {
			if (this.readyState == 4) {
				if (this.status == 200) {
					var response = JSON.parse(this.responseText);

					var tagarray;
					if (is_danbooru_2) {
						tagarray = response.tags.concat(response.wiki_page_tags);
					} else {
						tagarray = response[tag];
					}
					var tags = [];
					for (var i = 0; i < tagarray.length; i++) {
						tags.push(tagarray[i][0]);
					}

					o.enhanceTags(tags, function(etags) { callback(tag, etags); });
				} else {
				}
			}
		};
		request.send(null);
	},

	openBrowserTab: function(tag)
	{
		// This is never called, browsers don't support middle/right click on list boxes.
	}
};


function danbooruUpInit()
{
IF DATABASE
#IF NOT_EXTENSION
	danbooruUpGui.config = danbooruUpConfig;
	danbooruUpDBUpdater.config = danbooruUpConfig;
	danbooruUpCompleter.config = danbooruUpConfig;
	danbooruUpDBUpdater.gui = danbooruUpGui;
	danbooruUpGui.db_service = danbooruUpDBUpdater;
	danbooruUpCompleter.db_service = danbooruUpDBUpdater;

	danbooruUpConfig.init();
	danbooruUpGui.init();

	if (window.localStorage.danbooruUpEnable != 'true')
		return;
	danbooruUpDBUpdater.init();
	if (danbooruUpDBUpdater.loaded)
		danbooruUpCompleter.doHistory();
#ENDIF
#IF EXTENSION
	danbooruUpDOMProxyLower.init();
	danbooruUpCompleter.config = danbooruUpDOMProxyLower;
	danbooruUpCompleter.db_service = danbooruUpDOMProxyLower;
	danbooruUpCompleter.doHistory();
#ENDIF
ENDIF

	var script_arr = [];
	$ONLOAD_SCRIPTS
}


$CLASSES

IF EXTENSION
$UNPRIVILEGED_CLASSES
ENDIF

if (document.readyState == 'complete' || !window.opera)
	danbooruUpInit();
else
	document.addEventListener('DOMContentLoaded', function(e) { danbooruUpInit(); }, false);


})();
IF EXTENSION
danbooruUpGui.config = danbooruUpMessageProxyLower;
danbooruUpGui.db_service = danbooruUpMessageProxyLower;
danbooruUpMessageProxyLower.init();
danbooruUpMessageProxyLower.requestConfig(function() {
		// Should be inited after receiving the configuration data.
		danbooruUpGui.init();
});


ENDIF
